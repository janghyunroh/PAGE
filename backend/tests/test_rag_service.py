# ==============================================================================
# 파일: backend/tests/test_rag_service.py
# 역할: app/services/rag_service.py의 핵심 로직을 테스트합니다.
#       AsyncMock을 사용하여 비동기 함수를 올바르게 모킹하도록 수정했습니다.
# ==============================================================================
import pytest
# 수정: MagicMock과 함께 AsyncMock을 import 합니다.
from unittest.mock import patch, MagicMock, AsyncMock

# 테스트 대상 함수를 import 합니다.
from app.services.rag_service import generate_draft_from_topic

@pytest.mark.asyncio
async def test_generate_draft_from_topic(mocker):
    """
    generate_draft_from_topic 함수가 RAG 체인을 올바르게 호출하고
    결과를 반환하는지 테스트합니다.
    """
    # 1. 모킹(Mocking) 설정
    fake_draft = "This is a fake draft generated by a mock chain."
    
    # 수정: rag_chain.ainvoke가 호출될 때, await 가능한 AsyncMock을 반환하도록 설정합니다.
    # 이 AsyncMock은 호출되면 fake_draft 값을 결과로 내놓습니다.
    mock_rag_chain = MagicMock()
    mock_rag_chain.ainvoke = AsyncMock(return_value=fake_draft)
    
    mocker.patch('app.services.rag_service.rag_chain', mock_rag_chain)
    
    # 2. 테스트 실행
    topic = "Test Topic"
    result = await generate_draft_from_topic(topic)
    
    # 3. 결과 검증
    # 수정: ainvoke가 비동기적으로 호출되었는지 확인하기 위해 assert_awaited_once_with를 사용합니다.
    mock_rag_chain.ainvoke.assert_awaited_once_with(topic)
    assert result == fake_draft
